{"version":3,"sources":["data.js","App.js","reportWebVitals.js","index.js"],"names":["settings","alpha","beta","gamma","delta","x","y","time","coefficients","paramNames","Plot","createPlotlyComponent","Plotly","App","useState","data","setData","values","setValues","LVCalculation","useEffect","dataTemp","t","i","push","className","type","mode","marker","color","name","showlegend","layout","width","height","title","src","style","Object","keys","map","minWidth","value","onChange","prev","min","max","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7ccc2737.chunk.js","sourcesContent":["export const settings = {\r\n    alpha: 0.1,\r\n    beta: 0.0025,\r\n    gamma: 0.2,\r\n    delta: 0.0025,\r\n    x: 60,\r\n    y: 60,\r\n    time: 200,\r\n  }\r\n  export const coefficients = {\r\n    alpha: 100,\r\n    beta: 10000,\r\n    gamma: 100,\r\n    delta: 10000,\r\n    x: 1,\r\n    y: 1,\r\n    time: 1,\r\n  }\r\n  export const paramNames = {\r\n    alpha: 'Альфа',\r\n    beta: 'Бетта',\r\n    gamma: 'Гамма',\r\n    delta: 'Дельта',\r\n    x: 'X',\r\n    y: 'Y',\r\n    time: 'Время',\r\n  }","import React, { useEffect, useState } from 'react';\nimport { settings, coefficients, paramNames } from './data';\nimport Slider from 'rc-slider';\nimport 'rc-slider/assets/index.css';\nimport './App.css';\nimport Plotly from \"plotly.js\"\nimport createPlotlyComponent from 'react-plotly.js/factory';\nconst Plot = createPlotlyComponent(Plotly);\n\nfunction App() {\n  const [data,setData] = useState([])\n  const [values, setValues] = useState(settings)\n\n  const LVCalculation = (x,y,values) => {\n    const dx_dt = (values.alpha - values.beta * y) * x;\n    const dy_dt = (-values.gamma + values.delta * x) * y;\n    return [dx_dt,dy_dt]\n  }\n  useEffect(() => {\n    setData(() => {\n      const dataTemp = {\n        x: [],\n        y: [],\n        t: [],\n      }\n      let x = values.x;\n      let y = values.y;\n      for (let i = 0; i < values.time; i++) {\n        dataTemp.x.push(x);\n        dataTemp.y.push(y);\n        dataTemp.t.push(i);\n        const [dx,dy] = LVCalculation(x,y,values);\n        x+=dx;\n        y+=dy;\n      }\n      return dataTemp\n    })\n  },[values])\n\n  return (\n    <div className=\"App\">\n      <div className=\"title\">\n        <p>Модель \"Лотки-Вольтерры\"</p>\n        <p>  Кайкова Ирина. ИДМ-21-06.</p>\n      </div>\n      <div className='main'>\n        <div className=\"graph\">\n        <Plot\n          data={[\n            {\n              x: data.t,\n              y: data.y,\n              type: 'scatter',\n              mode: 'lines',\n              marker: {color: '#ea9999'},\n              name: \"Хищники\"\n            },\n            {\n              x: data.t,\n              y: data.x,\n              type: 'scatter',\n              mode: 'lines',\n              marker: {color: '#93c47d'},\n              name: \"Жертвы\"\n            },\n          ]}\n          showlegend={false}\n          layout={ {width: 600, height: 400, title: 'График зависимости популяций друг от друга.', showlegend: false} }\n          />\n          <div className='image'>\n            <img src='https://p0.pikist.com/photos/466/6/lynx-predator-big-cat-animal-animal-portrait-face-fur-head-drawing-animal-world.jpg'/>\n            <span style={{color: \"#ea9999\"}}>Хищники</span>\n          </div>\n          <div className='image'>\n            <img src='https://img-fotki.yandex.ru/get/9164/137106206.457/0_eba67_cf914ed3_orig.jpg'/>\n            <span style={{color: \"#93c47d\"}}>Жертвы</span>\n          </div>\n        </div>\n        <div className=\"graph\">\n        <Plot\n          data={[\n            {\n              x: data.x,\n              y: data.y,\n              type: 'scatter',\n              mode: 'lines',\n              marker: {color: '#5b5b5b'},\n            },\n          ]}\n          layout={ {width: 600, height: 400, title: 'Фазовый портрет.'} }\n          />\n        </div>\n      </div>\n      <div className=\"btns\">\n            {Object.keys(values).map((name) => (\n              <div className=\"btns_item\">\n                <div style={{minWidth: '60px'}}>{paramNames[name]}:</div>\n                <Slider \n                  value={values[name]*coefficients[name]} \n                  onChange={(data)=>{setValues(prev => ({...prev, [name]: data/coefficients[name]}))}}\n                  min={name === 'time' ? 10 : 0}\n                  max={name === 'time' ? 400 : 100}\n                />\n                <div style={{minWidth: '60px'}}>{values[name]}</div>\n              </div>\n            ))}\n          </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}